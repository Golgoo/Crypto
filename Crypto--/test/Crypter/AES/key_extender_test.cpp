#include "test/AES/Key_Extender_test.hpp"

#include <vector>

void Key_Extender_Test::TP_Test()
{
  std::vector<uchar> v = {
    0x2B, 0x7E, 0x15, 0x16, 0x28, 0xAE, 0xD2, 0xA6, 0xAB, 0xF7, 0x15, 0x88, 0x09, 0xCF, 0x4F, 0x3C
  };
  std::vector<std::vector<uchar>> expected;
  std::vector<uchar> expected0 = {0x2B, 0x7E, 0x15, 0x16, 0x28, 0xAE, 0xD2, 0xA6, 0xAB, 0xF7, 0x15, 0x88, 0x09, 0xCF, 0x4F, 0x3C};
  expected.push_back(expected0);
  std::vector<uchar> expected1 = {0xA0, 0xFA, 0xFE, 0x17, 0x88, 0x54, 0x2C, 0xB1, 0x23, 0xA3, 0x39, 0x39, 0x2A, 0x6C, 0x76, 0x05};
  expected.push_back(expected1);
  std::vector<uchar> expected2 = {0xF2, 0xC2, 0x95, 0xF2, 0x7A, 0x96, 0xB9, 0x43, 0x59, 0x35, 0x80, 0x7A, 0x73, 0x59, 0xF6, 0x7F};
  expected.push_back(expected2);
  std::vector<uchar> expected3 = {0x3D, 0x80, 0x47, 0x7D, 0x47, 0x16, 0xFE, 0x3E, 0x1E, 0x23, 0x7E, 0x44, 0x6D, 0x7A, 0x88, 0x3B};
  expected.push_back(expected3);
  std::vector<uchar> expected4 = {0xEF, 0x44, 0xA5, 0x41, 0xA8, 0x52, 0x5B, 0x7F, 0xB6, 0x71, 0x25, 0x3B, 0xDB, 0x0B, 0xAD, 0x00};
  expected.push_back(expected4);
  std::vector<uchar> expected5 = {0xD4, 0xD1, 0xC6, 0xF8, 0x7C, 0x83, 0x9D, 0x87, 0xCA, 0xF2, 0xB8, 0xBC, 0x11, 0xF9, 0x15, 0xBC};
  expected.push_back(expected5);
  std::vector<uchar> expected6 = {0x6D, 0x88, 0xA3, 0x7A, 0x11, 0x0B, 0x3E, 0xFD, 0xDB, 0xF9, 0x86, 0x41, 0xCA, 0x00, 0x93, 0xFD};
  expected.push_back(expected6);
  std::vector<uchar> expected7 = {0x4E, 0x54, 0xF7, 0x0E, 0x5F, 0x5F, 0xC9, 0xF3, 0x84, 0xA6, 0x4F, 0xB2, 0x4E, 0xA6, 0xDC, 0x4F};
  expected.push_back(expected7);
  std::vector<uchar> expected8 = {0xEA, 0xD2, 0x73, 0x21, 0xB5, 0x8D, 0xBA, 0xD2, 0x31, 0x2B, 0xF5, 0x60, 0x7F, 0x8D, 0x29, 0x2F};
  expected.push_back(expected8);
  std::vector<uchar> expected9 = {0xAC, 0x77, 0x66, 0xF3, 0x19, 0xFA, 0xDC, 0x21, 0x28, 0xD1, 0x29, 0x41, 0x57, 0x5C, 0x00, 0x6E};
  expected.push_back(expected9);
  std::vector<uchar> expectedA = {0xD0, 0x14, 0xF9, 0xA8, 0xC9, 0xEE, 0x25, 0x89, 0xE1, 0x3F, 0x0C, 0xC8, 0xB6, 0x63, 0x0C, 0xA6};
  expected.push_back(expectedA);

  aes::KeyExtender keyExtender(v);
  for(int i = 0 ; i < keyExtender.getNbRounds() ; i ++){
    CPPUNIT_ASSERT(expected[i] == keyExtender.getRound(i));
  }
}
